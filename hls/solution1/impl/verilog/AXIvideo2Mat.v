// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AXIvideo2Mat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        video_in_TDATA,
        video_in_TVALID,
        video_in_TREADY,
        video_in_TKEEP,
        video_in_TSTRB,
        video_in_TUSER,
        video_in_TLAST,
        video_in_TID,
        video_in_TDEST,
        height,
        width,
        img_data_stream_0_V_din,
        img_data_stream_0_V_full_n,
        img_data_stream_0_V_write,
        img_data_stream_1_V_din,
        img_data_stream_1_V_full_n,
        img_data_stream_1_V_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_pp2_stage0 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] video_in_TDATA;
input   video_in_TVALID;
output   video_in_TREADY;
input  [1:0] video_in_TKEEP;
input  [1:0] video_in_TSTRB;
input  [0:0] video_in_TUSER;
input  [0:0] video_in_TLAST;
input  [0:0] video_in_TID;
input  [0:0] video_in_TDEST;
input  [31:0] height;
input  [31:0] width;
output  [7:0] img_data_stream_0_V_din;
input   img_data_stream_0_V_full_n;
output   img_data_stream_0_V_write;
output  [7:0] img_data_stream_1_V_din;
input   img_data_stream_1_V_full_n;
output   img_data_stream_1_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_data_stream_0_V_write;
reg img_data_stream_1_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] video_in_V_data_V_0_data_out;
wire    video_in_V_data_V_0_vld_in;
wire    video_in_V_data_V_0_vld_out;
wire    video_in_V_data_V_0_ack_in;
reg    video_in_V_data_V_0_ack_out;
reg   [15:0] video_in_V_data_V_0_payload_A;
reg   [15:0] video_in_V_data_V_0_payload_B;
reg    video_in_V_data_V_0_sel_rd;
reg    video_in_V_data_V_0_sel_wr;
wire    video_in_V_data_V_0_sel;
wire    video_in_V_data_V_0_load_A;
wire    video_in_V_data_V_0_load_B;
reg   [1:0] video_in_V_data_V_0_state;
wire    video_in_V_data_V_0_state_cmp_full;
reg   [0:0] video_in_V_user_V_0_data_out;
wire    video_in_V_user_V_0_vld_in;
wire    video_in_V_user_V_0_vld_out;
wire    video_in_V_user_V_0_ack_in;
reg    video_in_V_user_V_0_ack_out;
reg   [0:0] video_in_V_user_V_0_payload_A;
reg   [0:0] video_in_V_user_V_0_payload_B;
reg    video_in_V_user_V_0_sel_rd;
reg    video_in_V_user_V_0_sel_wr;
wire    video_in_V_user_V_0_sel;
wire    video_in_V_user_V_0_load_A;
wire    video_in_V_user_V_0_load_B;
reg   [1:0] video_in_V_user_V_0_state;
wire    video_in_V_user_V_0_state_cmp_full;
reg   [0:0] video_in_V_last_V_0_data_out;
wire    video_in_V_last_V_0_vld_in;
wire    video_in_V_last_V_0_vld_out;
wire    video_in_V_last_V_0_ack_in;
reg    video_in_V_last_V_0_ack_out;
reg   [0:0] video_in_V_last_V_0_payload_A;
reg   [0:0] video_in_V_last_V_0_payload_B;
reg    video_in_V_last_V_0_sel_rd;
reg    video_in_V_last_V_0_sel_wr;
wire    video_in_V_last_V_0_sel;
wire    video_in_V_last_V_0_load_A;
wire    video_in_V_last_V_0_load_B;
reg   [1:0] video_in_V_last_V_0_state;
wire    video_in_V_last_V_0_state_cmp_full;
wire    video_in_V_dest_V_0_vld_in;
reg    video_in_V_dest_V_0_ack_out;
reg   [1:0] video_in_V_dest_V_0_state;
reg    video_in_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_i_reg_442;
reg   [0:0] brmerge_i_reg_451;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] eol_2_i_reg_289;
reg    img_data_stream_0_V_blk_n;
reg    img_data_stream_1_V_blk_n;
reg   [10:0] t_V_2_reg_219;
reg   [0:0] eol_i_reg_230;
reg   [0:0] eol_reg_242;
reg   [15:0] axi_data_V_1_i_reg_253;
reg   [0:0] axi_last_V_3_i_reg_300;
reg   [15:0] axi_data_V_3_i_reg_312;
wire   [10:0] rows_V_fu_334_p1;
reg    ap_block_state1;
wire   [10:0] cols_V_fu_338_p1;
reg   [15:0] tmp_data_V_reg_413;
reg   [0:0] tmp_last_V_reg_421;
wire   [0:0] exitcond2_i_fu_351_p2;
wire    ap_CS_fsm_state4;
wire   [10:0] i_V_fu_356_p2;
reg   [10:0] i_V_reg_437;
wire   [0:0] exitcond_i_fu_362_p2;
wire    ap_block_state5_pp1_stage0_iter0;
reg    ap_predicate_op61_read_state6;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [10:0] j_V_fu_367_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] brmerge_i_fu_376_p2;
wire    ap_block_state8_pp2_stage0_iter0;
reg    ap_block_state9_pp2_stage0_iter1;
reg    ap_block_pp2_stage0_11001;
reg    ap_block_pp1_stage0_subdone;
reg    ap_enable_reg_pp2_iter0;
wire    ap_CS_fsm_state7;
reg    ap_block_pp2_stage0_subdone;
reg   [0:0] ap_phi_mux_eol_2_i_phi_fu_292_p4;
reg   [0:0] axi_last_V1_i_reg_188;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state3;
reg   [15:0] axi_data_V1_i_reg_198;
reg   [10:0] t_V_reg_208;
reg   [0:0] ap_phi_mux_eol_i_phi_fu_234_p4;
reg   [0:0] ap_phi_mux_axi_last_V_2_i_phi_fu_269_p4;
reg   [15:0] ap_phi_mux_p_Val2_s_phi_fu_281_p4;
wire   [0:0] ap_phi_reg_pp1_iter1_axi_last_V_2_i_reg_264;
wire   [15:0] ap_phi_reg_pp1_iter1_p_Val2_s_reg_277;
reg    ap_block_pp1_stage0_01001;
reg   [0:0] sof_1_i_fu_140;
wire   [0:0] tmp_user_V_fu_342_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_condition_491;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 video_in_V_data_V_0_sel_rd = 1'b0;
#0 video_in_V_data_V_0_sel_wr = 1'b0;
#0 video_in_V_data_V_0_state = 2'd0;
#0 video_in_V_user_V_0_sel_rd = 1'b0;
#0 video_in_V_user_V_0_sel_wr = 1'b0;
#0 video_in_V_user_V_0_state = 2'd0;
#0 video_in_V_last_V_0_sel_rd = 1'b0;
#0 video_in_V_last_V_0_sel_wr = 1'b0;
#0 video_in_V_last_V_0_state = 2'd0;
#0 video_in_V_dest_V_0_state = 2'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond2_i_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_i_fu_362_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((exitcond2_i_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((exitcond2_i_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_phi_mux_eol_2_i_phi_fu_292_p4 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((video_in_V_data_V_0_ack_out == 1'b1) & (video_in_V_data_V_0_vld_out == 1'b1))) begin
            video_in_V_data_V_0_sel_rd <= ~video_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((video_in_V_data_V_0_ack_in == 1'b1) & (video_in_V_data_V_0_vld_in == 1'b1))) begin
            video_in_V_data_V_0_sel_wr <= ~video_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((video_in_V_data_V_0_state == 2'd2) & (video_in_V_data_V_0_vld_in == 1'b0)) | ((video_in_V_data_V_0_state == 2'd3) & (video_in_V_data_V_0_vld_in == 1'b0) & (video_in_V_data_V_0_ack_out == 1'b1)))) begin
            video_in_V_data_V_0_state <= 2'd2;
        end else if ((((video_in_V_data_V_0_state == 2'd1) & (video_in_V_data_V_0_ack_out == 1'b0)) | ((video_in_V_data_V_0_state == 2'd3) & (video_in_V_data_V_0_ack_out == 1'b0) & (video_in_V_data_V_0_vld_in == 1'b1)))) begin
            video_in_V_data_V_0_state <= 2'd1;
        end else if (((~((video_in_V_data_V_0_vld_in == 1'b0) & (video_in_V_data_V_0_ack_out == 1'b1)) & ~((video_in_V_data_V_0_ack_out == 1'b0) & (video_in_V_data_V_0_vld_in == 1'b1)) & (video_in_V_data_V_0_state == 2'd3)) | ((video_in_V_data_V_0_state == 2'd1) & (video_in_V_data_V_0_ack_out == 1'b1)) | ((video_in_V_data_V_0_state == 2'd2) & (video_in_V_data_V_0_vld_in == 1'b1)))) begin
            video_in_V_data_V_0_state <= 2'd3;
        end else begin
            video_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((video_in_V_dest_V_0_state == 2'd2) & (video_in_V_dest_V_0_vld_in == 1'b0)) | ((video_in_V_dest_V_0_state == 2'd3) & (video_in_V_dest_V_0_vld_in == 1'b0) & (video_in_V_dest_V_0_ack_out == 1'b1)))) begin
            video_in_V_dest_V_0_state <= 2'd2;
        end else if ((((video_in_V_dest_V_0_state == 2'd1) & (video_in_V_dest_V_0_ack_out == 1'b0)) | ((video_in_V_dest_V_0_state == 2'd3) & (video_in_V_dest_V_0_ack_out == 1'b0) & (video_in_V_dest_V_0_vld_in == 1'b1)))) begin
            video_in_V_dest_V_0_state <= 2'd1;
        end else if (((~((video_in_V_dest_V_0_vld_in == 1'b0) & (video_in_V_dest_V_0_ack_out == 1'b1)) & ~((video_in_V_dest_V_0_ack_out == 1'b0) & (video_in_V_dest_V_0_vld_in == 1'b1)) & (video_in_V_dest_V_0_state == 2'd3)) | ((video_in_V_dest_V_0_state == 2'd1) & (video_in_V_dest_V_0_ack_out == 1'b1)) | ((video_in_V_dest_V_0_state == 2'd2) & (video_in_V_dest_V_0_vld_in == 1'b1)))) begin
            video_in_V_dest_V_0_state <= 2'd3;
        end else begin
            video_in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((video_in_V_last_V_0_ack_out == 1'b1) & (video_in_V_last_V_0_vld_out == 1'b1))) begin
            video_in_V_last_V_0_sel_rd <= ~video_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((video_in_V_last_V_0_ack_in == 1'b1) & (video_in_V_last_V_0_vld_in == 1'b1))) begin
            video_in_V_last_V_0_sel_wr <= ~video_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((video_in_V_last_V_0_state == 2'd2) & (video_in_V_last_V_0_vld_in == 1'b0)) | ((video_in_V_last_V_0_state == 2'd3) & (video_in_V_last_V_0_vld_in == 1'b0) & (video_in_V_last_V_0_ack_out == 1'b1)))) begin
            video_in_V_last_V_0_state <= 2'd2;
        end else if ((((video_in_V_last_V_0_state == 2'd1) & (video_in_V_last_V_0_ack_out == 1'b0)) | ((video_in_V_last_V_0_state == 2'd3) & (video_in_V_last_V_0_ack_out == 1'b0) & (video_in_V_last_V_0_vld_in == 1'b1)))) begin
            video_in_V_last_V_0_state <= 2'd1;
        end else if (((~((video_in_V_last_V_0_vld_in == 1'b0) & (video_in_V_last_V_0_ack_out == 1'b1)) & ~((video_in_V_last_V_0_ack_out == 1'b0) & (video_in_V_last_V_0_vld_in == 1'b1)) & (video_in_V_last_V_0_state == 2'd3)) | ((video_in_V_last_V_0_state == 2'd1) & (video_in_V_last_V_0_ack_out == 1'b1)) | ((video_in_V_last_V_0_state == 2'd2) & (video_in_V_last_V_0_vld_in == 1'b1)))) begin
            video_in_V_last_V_0_state <= 2'd3;
        end else begin
            video_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((video_in_V_user_V_0_ack_out == 1'b1) & (video_in_V_user_V_0_vld_out == 1'b1))) begin
            video_in_V_user_V_0_sel_rd <= ~video_in_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((video_in_V_user_V_0_ack_in == 1'b1) & (video_in_V_user_V_0_vld_in == 1'b1))) begin
            video_in_V_user_V_0_sel_wr <= ~video_in_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((video_in_V_user_V_0_state == 2'd2) & (video_in_V_user_V_0_vld_in == 1'b0)) | ((video_in_V_user_V_0_state == 2'd3) & (video_in_V_user_V_0_vld_in == 1'b0) & (video_in_V_user_V_0_ack_out == 1'b1)))) begin
            video_in_V_user_V_0_state <= 2'd2;
        end else if ((((video_in_V_user_V_0_state == 2'd1) & (video_in_V_user_V_0_ack_out == 1'b0)) | ((video_in_V_user_V_0_state == 2'd3) & (video_in_V_user_V_0_ack_out == 1'b0) & (video_in_V_user_V_0_vld_in == 1'b1)))) begin
            video_in_V_user_V_0_state <= 2'd1;
        end else if (((~((video_in_V_user_V_0_vld_in == 1'b0) & (video_in_V_user_V_0_ack_out == 1'b1)) & ~((video_in_V_user_V_0_ack_out == 1'b0) & (video_in_V_user_V_0_vld_in == 1'b1)) & (video_in_V_user_V_0_state == 2'd3)) | ((video_in_V_user_V_0_state == 2'd1) & (video_in_V_user_V_0_ack_out == 1'b1)) | ((video_in_V_user_V_0_state == 2'd2) & (video_in_V_user_V_0_vld_in == 1'b1)))) begin
            video_in_V_user_V_0_state <= 2'd3;
        end else begin
            video_in_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V1_i_reg_198 <= tmp_data_V_reg_413;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_data_V1_i_reg_198 <= axi_data_V_3_i_reg_312;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_442 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_data_V_1_i_reg_253 <= ap_phi_mux_p_Val2_s_phi_fu_281_p4;
    end else if (((exitcond2_i_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        axi_data_V_1_i_reg_253 <= axi_data_V1_i_reg_198;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_data_V_3_i_reg_312 <= axi_data_V_1_i_reg_253;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (eol_2_i_reg_289 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        axi_data_V_3_i_reg_312 <= video_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V1_i_reg_188 <= tmp_last_V_reg_421;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_last_V1_i_reg_188 <= axi_last_V_3_i_reg_300;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_last_V_3_i_reg_300 <= eol_reg_242;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (eol_2_i_reg_289 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        axi_last_V_3_i_reg_300 <= video_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        eol_2_i_reg_289 <= eol_i_reg_230;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (eol_2_i_reg_289 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        eol_2_i_reg_289 <= video_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_442 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_i_reg_230 <= ap_phi_mux_axi_last_V_2_i_phi_fu_269_p4;
    end else if (((exitcond2_i_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_i_reg_230 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_442 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_reg_242 <= ap_phi_mux_axi_last_V_2_i_phi_fu_269_p4;
    end else if (((exitcond2_i_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_reg_242 <= axi_last_V1_i_reg_188;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_fu_362_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sof_1_i_fu_140 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sof_1_i_fu_140 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_fu_362_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        t_V_2_reg_219 <= j_V_fu_367_p2;
    end else if (((exitcond2_i_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        t_V_2_reg_219 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        t_V_reg_208 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        t_V_reg_208 <= i_V_reg_437;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_fu_362_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        brmerge_i_reg_451 <= brmerge_i_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_i_reg_442 <= exitcond_i_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_V_reg_437 <= i_V_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((video_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_reg_413 <= video_in_V_data_V_0_data_out;
        tmp_last_V_reg_421 <= video_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((video_in_V_data_V_0_load_A == 1'b1)) begin
        video_in_V_data_V_0_payload_A <= video_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((video_in_V_data_V_0_load_B == 1'b1)) begin
        video_in_V_data_V_0_payload_B <= video_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((video_in_V_last_V_0_load_A == 1'b1)) begin
        video_in_V_last_V_0_payload_A <= video_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((video_in_V_last_V_0_load_B == 1'b1)) begin
        video_in_V_last_V_0_payload_B <= video_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((video_in_V_user_V_0_load_A == 1'b1)) begin
        video_in_V_user_V_0_payload_A <= video_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((video_in_V_user_V_0_load_B == 1'b1)) begin
        video_in_V_user_V_0_payload_B <= video_in_TUSER;
    end
end

always @ (*) begin
    if (((exitcond2_i_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_491)) begin
        if ((brmerge_i_reg_451 == 1'd1)) begin
            ap_phi_mux_axi_last_V_2_i_phi_fu_269_p4 = eol_reg_242;
        end else if ((brmerge_i_reg_451 == 1'd0)) begin
            ap_phi_mux_axi_last_V_2_i_phi_fu_269_p4 = video_in_V_last_V_0_data_out;
        end else begin
            ap_phi_mux_axi_last_V_2_i_phi_fu_269_p4 = ap_phi_reg_pp1_iter1_axi_last_V_2_i_reg_264;
        end
    end else begin
        ap_phi_mux_axi_last_V_2_i_phi_fu_269_p4 = ap_phi_reg_pp1_iter1_axi_last_V_2_i_reg_264;
    end
end

always @ (*) begin
    if (((eol_2_i_reg_289 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_eol_2_i_phi_fu_292_p4 = video_in_V_last_V_0_data_out;
    end else begin
        ap_phi_mux_eol_2_i_phi_fu_292_p4 = eol_2_i_reg_289;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_i_phi_fu_234_p4 = ap_phi_mux_axi_last_V_2_i_phi_fu_269_p4;
    end else begin
        ap_phi_mux_eol_i_phi_fu_234_p4 = eol_i_reg_230;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_491)) begin
        if ((brmerge_i_reg_451 == 1'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_281_p4 = axi_data_V_1_i_reg_253;
        end else if ((brmerge_i_reg_451 == 1'd0)) begin
            ap_phi_mux_p_Val2_s_phi_fu_281_p4 = video_in_V_data_V_0_data_out;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_281_p4 = ap_phi_reg_pp1_iter1_p_Val2_s_reg_277;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_281_p4 = ap_phi_reg_pp1_iter1_p_Val2_s_reg_277;
    end
end

always @ (*) begin
    if (((exitcond2_i_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_data_stream_0_V_blk_n = img_data_stream_0_V_full_n;
    end else begin
        img_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_442 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_data_stream_0_V_write = 1'b1;
    end else begin
        img_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_data_stream_1_V_blk_n = img_data_stream_1_V_full_n;
    end else begin
        img_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_i_reg_442 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_data_stream_1_V_write = 1'b1;
    end else begin
        img_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((eol_2_i_reg_289 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((brmerge_i_reg_451 == 1'd0) & (exitcond_i_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        video_in_TDATA_blk_n = video_in_V_data_V_0_state[1'd0];
    end else begin
        video_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (eol_2_i_reg_289 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op61_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((video_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        video_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((video_in_V_data_V_0_sel == 1'b1)) begin
        video_in_V_data_V_0_data_out = video_in_V_data_V_0_payload_B;
    end else begin
        video_in_V_data_V_0_data_out = video_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (eol_2_i_reg_289 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op61_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((video_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        video_in_V_dest_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (eol_2_i_reg_289 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op61_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((video_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        video_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((video_in_V_last_V_0_sel == 1'b1)) begin
        video_in_V_last_V_0_data_out = video_in_V_last_V_0_payload_B;
    end else begin
        video_in_V_last_V_0_data_out = video_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (eol_2_i_reg_289 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op61_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((video_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        video_in_V_user_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((video_in_V_user_V_0_sel == 1'b1)) begin
        video_in_V_user_V_0_data_out = video_in_V_user_V_0_payload_B;
    end else begin
        video_in_V_user_V_0_data_out = video_in_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_user_V_fu_342_p1 == 1'd0) & (video_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_user_V_fu_342_p1 == 1'd1) & (video_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_i_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op61_read_state6 == 1'b1)) | ((exitcond_i_reg_442 == 1'd0) & (img_data_stream_1_V_full_n == 1'b0)) | ((exitcond_i_reg_442 == 1'd0) & (img_data_stream_0_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op61_read_state6 == 1'b1)) | ((exitcond_i_reg_442 == 1'd0) & (img_data_stream_1_V_full_n == 1'b0)) | ((exitcond_i_reg_442 == 1'd0) & (img_data_stream_0_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & (((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op61_read_state6 == 1'b1)) | ((exitcond_i_reg_442 == 1'd0) & (img_data_stream_1_V_full_n == 1'b0)) | ((exitcond_i_reg_442 == 1'd0) & (img_data_stream_0_V_full_n == 1'b0))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((eol_2_i_reg_289 == 1'd0) & (video_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((eol_2_i_reg_289 == 1'd0) & (video_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = (((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op61_read_state6 == 1'b1)) | ((exitcond_i_reg_442 == 1'd0) & (img_data_stream_1_V_full_n == 1'b0)) | ((exitcond_i_reg_442 == 1'd0) & (img_data_stream_0_V_full_n == 1'b0)));
end

assign ap_block_state8_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp2_stage0_iter1 = ((eol_2_i_reg_289 == 1'd0) & (video_in_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_condition_491 = ((exitcond_i_reg_442 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_reg_pp1_iter1_axi_last_V_2_i_reg_264 = 'bx;

assign ap_phi_reg_pp1_iter1_p_Val2_s_reg_277 = 'bx;

always @ (*) begin
    ap_predicate_op61_read_state6 = ((brmerge_i_reg_451 == 1'd0) & (exitcond_i_reg_442 == 1'd0));
end

assign brmerge_i_fu_376_p2 = (sof_1_i_fu_140 | ap_phi_mux_eol_i_phi_fu_234_p4);

assign cols_V_fu_338_p1 = width[10:0];

assign exitcond2_i_fu_351_p2 = ((t_V_reg_208 == rows_V_fu_334_p1) ? 1'b1 : 1'b0);

assign exitcond_i_fu_362_p2 = ((t_V_2_reg_219 == cols_V_fu_338_p1) ? 1'b1 : 1'b0);

assign i_V_fu_356_p2 = (t_V_reg_208 + 11'd1);

assign img_data_stream_0_V_din = ap_phi_mux_p_Val2_s_phi_fu_281_p4[7:0];

assign img_data_stream_1_V_din = {{ap_phi_mux_p_Val2_s_phi_fu_281_p4[15:8]}};

assign j_V_fu_367_p2 = (t_V_2_reg_219 + 11'd1);

assign rows_V_fu_334_p1 = height[10:0];

assign tmp_user_V_fu_342_p1 = video_in_V_user_V_0_data_out;

assign video_in_TREADY = video_in_V_dest_V_0_state[1'd1];

assign video_in_V_data_V_0_ack_in = video_in_V_data_V_0_state[1'd1];

assign video_in_V_data_V_0_load_A = (video_in_V_data_V_0_state_cmp_full & ~video_in_V_data_V_0_sel_wr);

assign video_in_V_data_V_0_load_B = (video_in_V_data_V_0_state_cmp_full & video_in_V_data_V_0_sel_wr);

assign video_in_V_data_V_0_sel = video_in_V_data_V_0_sel_rd;

assign video_in_V_data_V_0_state_cmp_full = ((video_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign video_in_V_data_V_0_vld_in = video_in_TVALID;

assign video_in_V_data_V_0_vld_out = video_in_V_data_V_0_state[1'd0];

assign video_in_V_dest_V_0_vld_in = video_in_TVALID;

assign video_in_V_last_V_0_ack_in = video_in_V_last_V_0_state[1'd1];

assign video_in_V_last_V_0_load_A = (video_in_V_last_V_0_state_cmp_full & ~video_in_V_last_V_0_sel_wr);

assign video_in_V_last_V_0_load_B = (video_in_V_last_V_0_state_cmp_full & video_in_V_last_V_0_sel_wr);

assign video_in_V_last_V_0_sel = video_in_V_last_V_0_sel_rd;

assign video_in_V_last_V_0_state_cmp_full = ((video_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign video_in_V_last_V_0_vld_in = video_in_TVALID;

assign video_in_V_last_V_0_vld_out = video_in_V_last_V_0_state[1'd0];

assign video_in_V_user_V_0_ack_in = video_in_V_user_V_0_state[1'd1];

assign video_in_V_user_V_0_load_A = (video_in_V_user_V_0_state_cmp_full & ~video_in_V_user_V_0_sel_wr);

assign video_in_V_user_V_0_load_B = (video_in_V_user_V_0_state_cmp_full & video_in_V_user_V_0_sel_wr);

assign video_in_V_user_V_0_sel = video_in_V_user_V_0_sel_rd;

assign video_in_V_user_V_0_state_cmp_full = ((video_in_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign video_in_V_user_V_0_vld_in = video_in_TVALID;

assign video_in_V_user_V_0_vld_out = video_in_V_user_V_0_state[1'd0];

endmodule //AXIvideo2Mat
